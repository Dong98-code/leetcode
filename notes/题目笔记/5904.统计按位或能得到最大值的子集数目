## 5904. 统计按位或能得到最大值的子集数目

### 题目链接：
[5904. 统计按位或能得到最大值的子集数目](https://leetcode-cn.com/problems/count-number-of-maximum-bitwise-or-subsets/)

### 题目描述

给你一个整数数组 `nums`` ，请你找出 nums 子集 按位或 可能得到的 最大值 ，并返回按位或能得到最大值的 不同非空子集的数目 。

如果数组 a 可以由数组 b 删除一些元素（或不删除）得到，则认为数组 a 是数组 b 的一个 子集 。如果选中的元素下标位置不一样，则认为两个子集 不同 。

对数组 a 执行 按位或，结果等于 `a[0] OR a[1] OR ... OR a[a.length - 1]`（下标从 0 开始）。

 

示例 1：
```
输入：nums = [3,1]
输出：2
解释：子集按位或能得到的最大值是 3 。有 2 个子集按位或可以得到 3 ：
- [3]
- [3,1]

```
示例 2：
```
输入：nums = [2,2,2]
输出：7
解释：[2,2,2] 的所有非空子集的按位或都可以得到 2 。总共有 23 - 1 = 7 个子集。
```
示例 3：
```
输入：nums = [3,2,1,5]
输出：6
解释：子集按位或可能的最大值是 7 。有 6 个子集按位或可以得到 7 ：
- [3,5]
- [3,1,5]
- [3,2,5]
- [3,2,1,5]
- [2,5]
- [2,1,5]
 
```


### 思路

暴力求解：

首先 遍历出 所有的 可能的子集

然后，计算 数组按位相或的结果

```python
class Solution:
    def countMaxOrSubsets(self, nums) -> int:
        # 一次遍历 哈希查询
        res = [[]]
        for num in nums:
            res += [l+[num] for l in res]
        # return res
        # 定义函数，计算数字按位相与的值
        def get_res(num_list):
            res = 0
            for num in num_list:
                res = res | num
            return res
        dic = {}
        for num_list in res:
            tmp_ans = get_res(num_list)
            if tmp_ans in dic:
                dic[tmp_ans] += 1
            else:
                dic[tmp_ans] = 1
        max_num = max(dic.values())
        return max_num
```
简化代码：

遍历的而同时与 原来的值相与，res中存放的为数组按或运算后的结果

```
res += [num | j for j in res]
```

num可以在当前集合 也可以不再，不在的情况为res本身’；res在子集和的话，则遍历当前res, 与其相与，
list 直接相加 相当于在尾部添加新的list

```python
class Solution:
    def countMaxOrSubsets(self, nums) -> int:
        res = [0]
        for num in nums:
            res += [num | j for j in res]
        return res.count(max(res))
```
